sphinx-codeautolink
===================
|pypi| |license|

Automatic links from Python code examples to reference documentation
at the flick of a switch!
sphinx-codeautolink analyses the code in your documentation
and inserts links to definitions that you use.

.. code:: python

   import sphinx_codeautolink
   from sphinx_codeautolink import parse as p

   sphinx_codeautolink.setup()
   names = p.parse_names([p.Name("setup")])

A directive to create a table of references from code examples
to a single definition is also provided and integrated to autodoc by default.
For example, :code:`.. code-refs:: sphinx_codeautolink.setup` produces:

.. code-refs:: sphinx_codeautolink.setup

Installation
------------

.. code:: sh

   $ pip install sphinx-codeautolink

To enable sphinx-codeautolink, modify the extension list in ``conf.py``.
Note that the extension name uses an underscore rather than a hyphen.

.. code:: python

   extensions = [
       ...,
       "sphinx_codeautolink",
   ]

That's it! Now your code examples are linked.
For ways of concatenating multiple examples
and setting default import statements among other things,
have a look at the :ref:`reference` documentation.

sphinx-codeautolink elsewhere:

- Package on `PyPI <https://pypi.org/project/sphinx-codeautolink>`_
- Development on `GitHub <https://github.com/felix-hilden/sphinx-codeautolink>`_

Caveats
-------
- Only works with HTML documentation, disabled otherwise. If the extension
  is off, it silently removes directives that would produce output.
- Doesn't run code or follow assignments and type hints. Therefore all possible
  resolvable names are not found, and the runtime correctness of code cannot be
  validated. For example, assigning :code:`cal = sphinx_codeautolink` and using
  its attributes like :code:`cal.setup()` does not produce a link. Likewise,
  nonsensical operations that would result in errors at runtime are possible.
  Some of this may change when the extension is developed further.
- Only processes literal blocks, not inline code. Sphinx has great tools for
  linking definitions inline, and longer code should be in a block anyway.

Thanks
------
The inspiration for sphinx-codeautolink came from seeing similar awesome docs
generated by `Sphinx-Gallery <https://sphinx-gallery.github.io>`_!
Their source was also immensely helpful to read
when I was stumbling through Sphinx and docutils.
If you have a folder full of example Python scripts you'd like to include in
your documentation, you'll not be disappointed in their offer.

.. toctree::
   :hidden:
   :caption: Package

   release_notes
   reference

.. toctree::
   :hidden:
   :caption: Guide

   examples

.. toctree::
   :hidden:
   :caption: Links

   PyPI ↪ <https://pypi.org/project/sphinx-codeautolink>
   GitHub ↪ <https://github.com/felix-hilden/sphinx-codeautolink>


.. |pypi| image:: https://img.shields.io/pypi/v/sphinx-codeautolink.svg
   :target: https://pypi.org/project/sphinx-codeautolink
   :alt: PyPI package

.. |license| image:: https://img.shields.io/badge/License-MIT-blue.svg
   :target: https://choosealicense.com/licenses/mit
   :alt: License: MIT
